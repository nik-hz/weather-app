{"version":3,"sources":["types.js","components/App.js","actions/index.js","reducers/index.js","reducers/locationReducer.js","reducers/weatherReducer.js","index.js"],"names":["FETCH_LOCATION","FETCH_WEATHER","INITIAL_COORD_LOCATION","useStyles","makeStyles","theme","root","minWidth","display","flexWrap","marginBottom","justifyContent","bullet","margin","transform","title","fontSize","pos","input","textField","marginLeft","spacing","marginRight","width","cardAction","button","connect","state","location","weather","fetchLocation","city","country","dispatch","getState","a","coords","navigator","geolocation","getCurrentPosition","longitude","latitude","axios","get","params","localityLanguage","position","type","payload","fetchWeatherAndCity","formCity","formCountry","data","countryCode","countryName","q","units","appid","process","console","log","coord","lat","lon","error","classes","useState","formData","setFormData","useEffect","onChange","e","target","name","value","Card","className","CardContent","Typography","variant","onSubmit","preventDefault","TextField","id","label","helperText","fullWidth","InputLabelProps","shrink","placeholder","CardActions","Button","iconPicker","main","description","temp","combineReducers","action","store","createStore","rootReducers","compose","applyMiddleware","thunk","window","devToolsExtension","f","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.290e63e8.chunk.js","sourcesContent":["export const FETCH_LOCATION = 'FETCH_LOCATION'\nexport const FETCH_WEATHER = 'FETCH_WEATHER'\nexport const SET_LOCATION = 'SET_LOCATION'\nexport const INITIAL_COORD_LOCATION = 'INITIAL_COORD_LOCATION'\n// export const SET_LOCATION = 'SET_LOCATION'\n","import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nimport { fetchLocation, fetchWeatherAndCity } from '../actions'\n\n// styiling related imports\nimport { makeStyles } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport Card from '@material-ui/core/Card'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport Typography from '@material-ui/core/Typography'\n\n// Importing MUI icons for the weather view\nimport FilterDramaIcon from '@material-ui/icons/FilterDrama'\nimport WbSunnyIcon from '@material-ui/icons/WbSunny'\nimport FormatColorResetIcon from '@material-ui/icons/FormatColorReset'\nimport AcUnitIcon from '@material-ui/icons/AcUnit'\nimport { Filter } from '@material-ui/icons'\nimport GrainIcon from '@material-ui/icons/Grain'\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        minWidth: 275,\n        display: 'flex',\n        flexWrap: 'wrap',\n        marginBottom: 5,\n        justifyContent: 'center',\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n\n    input: {},\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: '25ch',\n    },\n    cardAction: {\n        justifyContent: 'center',\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n}))\n\nconst App = ({ fetchLocation, fetchWeatherAndCity, location, weather }) => {\n    const classes = useStyles()\n    // Hooks\n    //  custom state hooks, to manage the form inputs --> doing this over redux is too extra\n    const [formData, setFormData] = useState({\n        city: '',\n        country: '',\n    })\n    // run on every re-render --> fetchLocation will only run if there is no location at all\n    useEffect(() => {\n        fetchLocation()\n        console.log('fetchLocation ran in Weather useEffect hook')\n\n        return () => {}\n    }, [])\n\n    const onSubmit = (e) => {\n        console.log(e)\n        e.preventDefault()\n        console.log(formData)\n\n        fetchWeatherAndCity(formData.city, formData.country)\n    }\n\n    const onChange = (e) => {\n        setFormData({ ...formData, [e.target.name]: e.target.value })\n    }\n\n    //     import FilterDramaIcon from '@material-ui/icons/FilterDrama'\n    // import WbSunnyIcon from '@material-ui/icons/WbSunny'\n    // import FormatColorResetIcon from '@material-ui/icons/FormatColorReset'\n    // import AcUnitIcon from '@material-ui/icons/AcUnit'\n\n    const iconPicker = (weather) => {\n        //{/* Clear, Clouds Rain, Snow */}\n        switch (weather) {\n            case 'Clear':\n                return <WbSunnyIcon />\n            case 'Clouds':\n                return <FilterDramaIcon />\n            case 'Rain':\n                return <FormatColorResetIcon />\n            case 'Snow':\n                return <AcUnitIcon />\n            case 'Mist':\n                return <GrainIcon />\n            default:\n                return 'loading'\n        }\n    }\n\n    return (\n        <div>\n            <Card className={classes.root}>\n                <CardContent>\n                    <Typography variant=\"h5\">Demo Weather App</Typography>\n                </CardContent>\n            </Card>\n            <Card className={classes.root}>\n                <CardContent>\n                    {/* names are a bit screwed up but well keep location as is with long and lat comp. */}\n                    <form onSubmit={(e) => onSubmit(e)}>\n                        <div className={classes.root}>\n                            <TextField\n                                id=\"standard-full-width\"\n                                label=\"City\"\n                                // style={{ margin: 8 }}\n                                helperText=\"Enter the full name\"\n                                fullWidth \n                                margin={'normal'}\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                type=\"text\"\n                                placeholder={\n                                    location.data ? location.data.city : 'City'\n                                }\n                                // value={location.data ? location.data.city : 'loading'}\n                                name=\"city\"\n                                onChange={(e) => onChange(e)}\n                            />\n                            <TextField\n                                id=\"standard-full-width\"\n                                label=\"Country\"\n                                // style={{ margin: 8 }}\n                                helperText=\"Enter the full name\"\n                                fullWidth\n                                margin={'normal'}\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                type=\"text\"\n                                placeholder={\n                                    location.data\n                                        ? location.data.countryName\n                                        : 'Country'\n                                }\n                                name=\"country\"\n                                onChange={(e) => onChange(e)}\n                            />\n                        </div>\n\n                        <CardActions className={classes.cardAction}>\n                            <Button\n                                variant=\"contained\"\n                                className={classes.button}\n                                type=\"submit\"\n                            >\n                                Weather Forecast\n                            </Button>\n                        </CardActions>\n                    </form>\n                </CardContent>\n            </Card>\n            <Card className={classes.root}>\n                <CardContent className={classes.cardAction}>\n                    <Typography variant=\"h6\">Weather</Typography>\n                    <Typography variant=\"subtitle1\">\n                        {weather.data\n                            ? iconPicker(weather.data.weather[0].main)\n                            : 'Loading'}\n                        <br />\n                        {weather.data\n                            ? weather.data.weather[0].description\n                            : 'Loading'}\n                        <br />\n                        {weather.data ? weather.data.main.temp : 'Loading'}{' '}\n                        degrees celsius\n                    </Typography>\n                </CardContent>{' '}\n            </Card>\n        </div>\n    )\n}\n\nApp.propTypes = {}\n\nconst mapStateToProps = (state) => {\n    return {\n        // this way we can use our state in react components\n        location: state.location,\n        weather: state.weather,\n    }\n}\n\n// fetchLocation is basically my custom dispatch action that is in /actions\nexport default connect(mapStateToProps, { fetchLocation, fetchWeatherAndCity })(\n    App\n)\n","import axios from 'axios'\nimport {\n    INITIAL_COORD_LOCATION,\n    FETCH_LOCATION,\n    SET_LOCATION,\n    FETCH_WEATHER,\n} from '../types'\n\nexport const fetchLocation = (city, country) => async (dispatch, getState) => {\n    const coords = async () => {\n        await navigator.geolocation.getCurrentPosition((pos) => {\n            // console.log('from action pos:', pos)\n\n            return {\n                longitude: pos.coords.latitude,\n                latitude: pos.coords.longitude,\n            }\n        })\n    }\n\n    const position = await axios.get(\n        'https://api.bigdatacloud.net/data/reverse-geocode-client',\n        // ?latitude=37.42159&longitude=-122.0837&localityLanguage=de'\n        {\n            params: {\n                latitude: coords.latitude,\n                longitude: coords.longitude,\n                localityLanguage: 'en',\n            },\n        }\n    )\n    // location is an object with lat and longitude\n    dispatch({ type: INITIAL_COORD_LOCATION, payload: position })\n}\n\n// get location from the text input -> this updates the same location state\n// for this we will use the location setting from the weather API\n// basically getweather will dispatch two actions --> we will run both reducers\n// fetch weather and u[date location in the same time\n\nexport const fetchWeatherAndCity = (formCity, formCountry) => async (\n    dispatch,\n    getState\n) => {\n    // api.openweathermap.org/data/2.5/weather?id={city id}&appid={API key}\n    try {\n        const { city, countryCode, countryName } = getState().location.data\n        const weather = await axios.get(\n            // 'https://api.openweathermap.org/data/2.5/onecall',\n            'https://api.openweathermap.org/data/2.5/weather',\n            {\n                params: {\n                    // city + country code separated by comma\n                    // should need some custom error handling with circling back to find city without country code\n                    // plus error msg --> fun project idea\n                    q: `${formCity ? formCity : city},${\n                        formCountry ? formCountry : countryName\n                    }`,\n                    // lat: latitude,\n                    // lon: longitude,\n                    // metric changes the units from K to C\n                    units: 'metric',\n                    // its a free api with 60 calls per minute so here you go, use the key responsibly pls\n                    appid: process.env.REACT_APP_WEATHER_TOKEN,\n                },\n            }\n        )\n\n        console.log(weather)\n        // pluck out the coords from the weather API and call the fetchCoords action\n\n        const position = await axios.get(\n            'https://api.bigdatacloud.net/data/reverse-geocode-client',\n            // ?latitude=37.42159&longitude=-122.0837&localityLanguage=de'\n            {\n                params: {\n                    latitude: weather.data.coord.lat,\n                    longitude: weather.data.coord.lon,\n                    localityLanguage: 'en',\n                },\n            }\n        )\n        // location is an object with lat and longitude\n        dispatch({ type: FETCH_LOCATION, payload: position })\n\n        dispatch(\n            { type: FETCH_WEATHER, payload: weather }\n            // { type: FETCH_LOCATION, payload: weather }\n        )\n    } catch (error) {\n        console.error(error)\n    }\n\n    // const weather = await axios.get()\n}\n","import { combineReducers } from 'redux'\n\nimport { locationReducer } from './locationReducer'\nimport { weatherReducer } from './weatherReducer'\n\nexport default combineReducers({\n    location: locationReducer,\n    weather: weatherReducer,\n})\n","import { INITIAL_COORD_LOCATION, FETCH_LOCATION } from '../types.js'\n\nexport const locationReducer = (state = [], action) => {\n    switch (action.type) {\n        case INITIAL_COORD_LOCATION:\n            return action.payload\n        case FETCH_LOCATION:\n            // update the entire coords object\n            console.log(action.payload)\n            return action.payload\n        // console.log(action.payload)\n\n        default:\n            return state\n    }\n}\n","import { FETCH_WEATHER } from '../types.js'\n\nexport const weatherReducer = (state = [], action) => {\n    switch (action.type) {\n        case FETCH_WEATHER:\n            return action.payload\n        default:\n            return state\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\n\nimport App from './components/App'\nimport rootReducers from './reducers'\n\nconst store = createStore(\n    rootReducers,\n    compose(\n        applyMiddleware(thunk),\n        window.devToolsExtension ? window.devToolsExtension() : (f) => f\n    )\n)\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.querySelector('#root')\n)\n"],"sourceRoot":""}